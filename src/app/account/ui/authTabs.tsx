import { zodResolver } from '@hookform/resolvers/zod'
import {
	CheckCircle2,
	Chrome,
	Eye,
	EyeOff,
	Key,
	Mail,
	Phone,
	Trash2,
} from 'lucide-react'
import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { FaYandex } from 'react-icons/fa'
import { toast } from 'sonner'

import { PasswordFormData, passwordSchema } from '../model/validationSchemas'

import { Button } from '@/shared/ui/kit/button'
import { Label } from '@/shared/ui/kit/label'

export const AuthTabs = () => {
	const [isLoading, setIsLoading] = useState(false)
	const [showPassword, setShowPassword] = useState(false)
	const [twoFactorEnabled, setTwoFactorEnabled] = useState(false)
	const [emailVerified, setEmailVerified] = useState(true)
	const [phoneVerified, setPhoneVerified] = useState(false)
	const [googleLinked, setGoogleLinked] = useState(true)
	const [yandexLinked, setYandexLinked] = useState(true)

	const passwordForm = useForm<PasswordFormData>({
		resolver: zodResolver(passwordSchema),
	})

	const onPasswordSubmit = async (data: PasswordFormData) => {
		setIsLoading(true)
		try {
			await new Promise((resolve) => setTimeout(resolve, 1500))
			toast.success('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
			passwordForm.reset()
		} catch {
			toast.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è')
		} finally {
			setIsLoading(false)
		}
	}

	const handleSendCode = () => {
		toast.success('–ö–æ–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω', {
			description: '–§–∏—á–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞',
		})
	}
	const handleDeletePhone = () => {
		toast.success('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¢–û —á–µ–≥–æ –ù–ï–¢', {
			description: '–§–∏—á–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞',
		})
	}
	const deleteAccount = () => {
		toast.success('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', {
			description: '–Ø –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –µ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, –∞ –≤—ã —É–∂–µ —É–¥–∞–ª—è–µ—Ç–µ',
		})
	}

	const googleHandle = () => {
		setGoogleLinked(!googleLinked)
		toast.success(googleLinked ? 'Google –æ—Ç–∫–ª—é—á—ë–Ω' : 'Google –ø–æ–¥–∫–ª—é—á—ë–Ω', {
			description: '–ù–æ —Ñ–∏—á—É —è —ç—Ç—É –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª, üòÇü§£üòÇü§£',
		})
	}

	const yandexHandle = () => {
		setYandexLinked(!yandexLinked)
		toast.success(yandexLinked ? 'Yandex –æ—Ç–∫–ª—é—á—ë–Ω' : 'Yandex –ø–æ–¥–∫–ª—é—á—ë–Ω', {
			description: '–ù–æ —Ñ–∏—á—É —è —ç—Ç—É –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª, üòÇü§£üòÇü§£',
		})
	}
	return (
		<div className="space-y-8 py-3">
			<h3 className="text-lg font-semibold text-white mb-4 flex items-center">
				<Key className="w-5 h-5 mr-2" /> –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
			</h3>
			<form
				onSubmit={passwordForm.handleSubmit(onPasswordSubmit)}
				className="space-y-4"
			>
				<div>
					<Label variant="left">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å</Label>
					<div className="relative">
						<input
							type={showPassword ? 'text' : 'password'}
							{...passwordForm.register('currentPassword')}
							className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
						/>
						<Button
							onClick={() => setShowPassword(!showPassword)}
							className="absolute right-3 top-1/2 -translate-y-1/2"
						>
							{showPassword ? (
								<EyeOff className="w-4 h-4 text-gray-500" />
							) : (
								<Eye className="w-4 h-4 text-gray-500" />
							)}
						</Button>
					</div>
				</div>
				<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<Label variant="left">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
						<input
							type="password"
							{...passwordForm.register('newPassword')}
							className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
						/>
					</div>
					<div>
						<Label variant="left">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
						<input
							type="password"
							{...passwordForm.register('confirmPassword')}
							className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
						/>
					</div>
				</div>
				{passwordForm.formState.errors.confirmPassword && (
					<p className="text-sm text-red-600">
						{passwordForm.formState.errors.confirmPassword.message}
					</p>
				)}
				<Button variant={'submit'} disabled={isLoading}>
					{isLoading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
				</Button>
			</form>
			{/* –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∞, –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏–º */}
			<div className="relative border-t pt-8 ">
				<h3 className="text-lg font-semibold text-white mb-2 flex items-center">
					<CheckCircle2 className="w-5 h-5 mr-2" />
					–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
				</h3>
				<Button variant={'submit'} className="p-2 mb-2">
					<p className="text-wrap">
						–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –≤–∞—à–µ–º—É
						–∞–∫–∫–∞—É–Ω—Ç—É
					</p>
				</Button>
				<div className="flex items-center justify-between">
					<div>
						<p className="text-sm font-medium text-white">
							–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω / TOTP
						</p>
						<p className="text-xs text-white">
							{twoFactorEnabled ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
						</p>
					</div>
					<button
						onClick={() => setTwoFactorEnabled(!twoFactorEnabled)}
						className={`relative inline-flex h-6 w-11 ring-green-500 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${twoFactorEnabled ? 'bg-green-500' : 'bg-gray-200'}`}
					>
						<span
							className={`inline-block h-4 w-4 transform rounded-full
								 bg-white transition-transform 
								 ${twoFactorEnabled ? 'translate-x-6' : 'translate-x-1'}`}
						/>
					</button>
				</div>
			</div>
			<div className="border-t pt-8">
				<h3 className="text-lg font-semibold text-white mb-4">
					–°–ø–æ—Å–æ–±—ã –≤—Ö–æ–¥–∞
				</h3>
				<div className="flex items-center justify-between p-4 border rounded-lg mb-3">
					<div className="flex items-center">
						<Mail className="w-5 h-5 text-gray-400 mr-3" />
						<div>
							<p>Email</p>
							<p
								className={`text-sm 
									${emailVerified ? 'text-green-600' : 'text-gray-500'}`}
							>
								{emailVerified
									? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
									: '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}
							</p>
						</div>
					</div>
					<div className="flex items-center space-x-2">
						{!emailVerified && (
							<button
								onClick={() => {
									setEmailVerified(true)
									toast.success('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
								}}
								className="text-sm text-indigo-600 hover:text-indigo-700"
							>
								–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
							</button>
						)}
						<Button variant="danger" onClick={handleDeletePhone}>
							–£–¥–∞–ª–∏—Ç—å
						</Button>
					</div>
				</div>
				<div
					className="flex flex-col sm:flex-row items-start sm:items-center justify-between
					border rounded-lg 
					p-4 gap-y-2 mb-3"
				>
					<div className="flex items-center">
						<Phone className="w-5 h-5 text-gray-400 mr-3" />
						<div>
							<p className="font-medium text-white">–¢–µ–ª–µ—Ñ–æ–Ω</p>
							<p
								className={`text-sm text-nowrap ${phoneVerified ? 'text-green-600' : 'text-gray-500'}`}
							>
								{phoneVerified
									? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
									: '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'}
							</p>
						</div>
					</div>
					<div className="w-full flex justify-around sm:justify-end items-center">
						{!phoneVerified && (
							<Button variant="default" onClick={handleSendCode}>
								–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥
							</Button>
						)}
						<Button variant="danger" onClick={handleDeletePhone}>
							–£–¥–∞–ª–∏—Ç—å
						</Button>
					</div>
				</div>
				<div className="flex items-center justify-between p-4 border rounded-lg">
					<div className="flex items-center">
						<Chrome className="w-5 h-5 text-gray-400 mr-3" />
						<div>
							<p className="font-medium text-white">Google</p>
							<p
								className={`text-[10px] ${googleLinked ? 'text-green-600' : 'text-gray-500'}`}
							>
								{googleLinked ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}
							</p>
						</div>
					</div>
					<Button
						variant="danger"
						className="text-[12px]"
						onClick={() => googleHandle()}
					>
						{googleLinked ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
					</Button>
				</div>
				<div className="flex items-center justify-between mt-4 p-4 border rounded-lg">
					<div className="flex items-center">
						<FaYandex className="w-5 h-5 text-gray-400 mr-3" />
						<div>
							<p className="font-medium text-white">Yandex</p>
							<p
								className={`text-[10px] 
								${yandexLinked ? 'text-green-600' : 'text-gray-500'}`}
							>
								{yandexLinked ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}
							</p>
						</div>
					</div>
					<Button
						variant="danger"
						className="text-[12px]"
						onClick={() => yandexHandle()}
					>
						{yandexLinked ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
					</Button>
				</div>
			</div>
			{/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
			<div className="border-t pt-8">
				<h3 className="text-lg font-semibold text-white mb-4">
					–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
				</h3>
				<Button
					variant="danger"
					className="w-full"
					onClick={() => deleteAccount()}
				>
					<Trash2 className="w-4 h-4 mr-2" />
					–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–≤—Å–µ–≥–¥–∞
				</Button>
			</div>
		</div>
	)
}
